// Version.cpp: implementation of the CVersion class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "JSQ.h"
#include "Version.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CVersion::CVersion()
{
//	m_strVersion = _T("1.00.0001");
//	m_strDescription = _T("第一个版本开始，注意这个是内部版本，以后增加的内容需慢慢加，前面的只需注释掉就可以了。");
//	m_strTime = _T("2005-05-22 09:39");

//	m_strVersion = _T("1.00.0002");
//	m_strDescription = _T("每次计算Delt的值时从文件中读取当前进度，sleep(2)时CPU占用率为45%");
//	m_strTime = _T("2005-07-31 07:35");

	/*
	    说明：不知道我当初是怎么想的，可能是用于测试后来忘了改过来吧。
		      我居然只寻找Delt(n)<1e4的n，而不管n的素性如何，今天忽然见到
			      [2005-08-06 11:42] Delt( 214281757 ) = 978
			  但10^978-1却没有这个素因子，开始我还以为自己找到了一个新的因子，
			  但用Matlab一试，才发现214281757不是一个素数。
			  再一看代码连判断n是否为素数的代码都没有，还亏我连着几天都在运行这个程序寻找
			  Delt(p)<1e4
			  现在我也不知道计算得到的结果中有多少合数，这件事很是让我气愤，
			  再怎么说寻找得到的数应该是满足条件的数，也许是当初寻找的是1e6数量级的数，所以不会出现现在这种情况，
			  但是不管怎么说现在出了一个错误，所以以后写代码还是得留些神，不要今天这样，明天又有个新的想法
			  对于那些牵涉到程序运行结果对错得代码一定得标明使用范围和注意的事项
			  例如现在MAX_DIGIT为30，所以找到的p必须小于1e15，最好是小于1e14
			  于是当n到了1e20的时候，现在的程序就不能运行了，或者说就不应该运行，
			  改其实很简单，将MAX_DIGIT改为50就可以了。
			  不过就目前的运行速度连续运行一年也只能计算到1e13
			  对于搜寻Delt(p)<1e4，判断搜到的数是否为素数是必不可少的，
			  不管判断的代码效率如何低，今天就罗唆到这里，以后可能还会继续。
	*/
	//m_strVersion = _T("1.00.0003");
	//m_strDescription = _T("计算Delt(n)<1e4满足条件后，再判断n是否为素数");
	//m_strTime = _T("2005-08-06 13:01");


//	/*
//	    说明: WkDebug将提示信息存储到文件中方便查看.改变量不是很大
//		      另外给一些代码加了点注释,去掉了几行冗余代码
//	 
//	*/
//	m_strVersion = _T("1.00.0004");
//	m_strDescription = _T("加了一些注释, 增加WkDebug工具类");
//	m_strTime = _T("2005-10-09 21:29");



//	/*
//	 改进之后Delt(p)<1e4的搜索效率有了比较显著的提高
//	 以下为测试结果
//	 [2005-10-13 23:20] Delt( 509538919 ) = 2207
//	 [2005-10-13 21:48] Delt( 506129077 ) = 9706
//	 [2005-10-13 21:41] Delt( 505885997 ) = 49
//	 CPU: 88%
//	 505885997~509538919 (3652922) ~ 1h39min ~ 99 min ~ 5940 sec
//	 614 nums/sec
//	 */
//	m_strVersion = _T("1.00.0005");
//	m_strDescription = _T("Mod(a,b,c)的算法有所改进");
//	m_strTime = _T("2005-10-13 23:32");


//	/* 
//	    增加了一个计算Euler猜想的算式，即寻找满足下列等式的数         
//            n1^6+n2^6+n3^6+n4^6+n5^6+n6^6=n7^6  (6.1.6)
//			现在只是得到了如下结果
//		[2005-11-12 17:08] 18^6+19^6+23^6+24^6+42^6+43^6-48^6=1299, 8818500 ms
//		也就是说，当n7<=48时，式子(6.1.6)无解
//	*/
//	m_strVersion = _T("1.00.0006");
//	m_strDescription = _T("增加了CEuler类");
//	m_strTime = _T("2005-11-14 22:28");

	
//	/*
//	 * 计算Delt(p)的算法略有改进，另外编译的时候编译成Release版速度有大幅度的
//	 * 提升。别的方面暂无变动。 
//	 */
//	m_strVersion = _T("1.00.0007");
//	m_strDescription = _T("计算Delt(p)时一次计算多步。");
//	m_strTime = _T("2006-02-26 11:18");

	
//	/*
//		计算Delt(p)时在p<1e15时会使用__int64进行计算。
//		计算速度提升了10倍左右。
//	*/
//	m_strVersion = _T("1.00.0008");
//	m_strDescription = _T("计算Delt(p)时在p<1e15时会使用__int64进行计算。");
//	m_strTime = _T("2006-03-15 22:41");
	
//	/*
//		计算Delt(p)时的输出中将计算的速度显示出来。
//	*/
//	m_strVersion = _T("1.00.0009");
//	m_strDescription = _T("计算Delt(p)时的输出中将计算的速度显示出来。");
//	m_strTime = _T("2007-01-31 16:02");
	

//	/*
//	 *	将每次计算的尺步由10增加到了100
//	 *  也即增加了WK_DIGIT_BASE这个宏并且将之投入到了实际计算中。
//	 */
//	m_strVersion = _T("1.00.0010");
//	m_strDescription = _T("每次计算的尺步由10增加到了100.");
//	m_strTime = _T("2008-02-06 14:35");

//	/* 主要是添加了gcd()这个方法，另外把一些很细微的地方稍微改进了一下。
//	 *  
//	 */
//	m_strVersion = _T("1.00.0011");
//	m_strDescription = _T("添加了gcd()这个方法。");
//	m_strTime = _T("2009-10-04 16:05");

//	/*
//	 * 将计算Delt的值从10000改成了100000, fza()里面将stra添加了一个方法stra.TrimRight()防止右端
//	 多出来的换行。
//	 */
//	m_strVersion = _T("1.01.0012");
//	m_strDescription = _T("将计算Delt的值从10000改成了100000。");
//	m_strTime = _T("2010-01-17 17:12");


//	m_strVersion = _T("1.01.0013");
//	m_strDescription = _T("将计算的默认的数改为10^14。");
//	m_strTime = _T("2010-06-02 09:01");

	m_strVersion = _T("1.01.0013.6");
	m_strDescription = _T("解决了函数GetRepLogNum的输入为1000000时，返回值不对的问题。");
	m_strTime = _T("2014-02-19 23:22");
}

CVersion::~CVersion()
{

}

